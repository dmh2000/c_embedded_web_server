// GIMPEL PC LINT V7.0
//    Compiler Options for Microsoft C Version 8.0 and earlier

-cmsc

//    This file contains options to allow PC-lint to process source
//    files for your compiler.  It is used as follows:
//
//    lint  co-msc.lnt  source-file(s)
//

            // while processing compiler (library) header files ...
-elib(652)  // suppress message about #define of earlier declared symbols
-elib(762)  // suppress message about multiple identical declarations and
-elib(760)  // suppress message about multiple identical macro defs
-elib(514)  // allow #if <boolean> | <boolean>
-elib(553)  // undefined preprocessor variables assumed 0
-elib(793)
-elib(657)

-e537  // repeated include file
-e766
-e764
-esym(760,packed)  //allows multipule #defines of "packed"
		   //so we can compile for m68xxx and intel targets
	// If you're programming MS Windows set the option
        //  +e934 to report passing short auto pointers as arguments
        // See Petzold, Windows 3.0, pp 897-902
        // You might also want to set the option: -printf(w2,wsprintf)
        // It makes wsprintf like sprintf except that pointers have
        // to be far.

//  SREGS, WORDREGS, BYTEREGS are defined in both bios.h and dos.h
//  and accordingly you MAY get type differences based on 'origin'.
//  If so, use the following options:
//      -etd(origin)
//      -elib(770)

-format=%(%f(%l)\s:\s%)%t\s%n:\s%m
        // error format similar to MSC
        // Note that %c can also be used to specify column
-e46    // allows bit-fields to be other than int or unsigned
+fan    // allow anonymous unions
+fdi    // Use directory of the including file
-esym(123,min,max)  // allows users to use min, max as variables
-d_MSC_VER=800  // The version number of Microsoft C, for C6 make this 700
                // For Visual C++ make it 800
-u__STDC__      // Needed for C 7.00 to allow use of open, close, etc.
+rw(__inline)   // activate the __inline keyword
-sld10          // sizeof(long double) is 10.


//  The following functions exhibit variable return modes.
//  That is, they may equally-usefully be called for a value
//  as called just for their effects.  Accordingly we inhibit
//  Warning 534 for these functions.
//  Feel free to add to or subtract from this list.

-esym(534,close,creat,fclose,fflush,_flsbuf,fprintf,fputc)
-esym(534,fputs,fscanf,fseek,fwrite,lseek,memcpy,memmove,memset)
-esym(534,printf,puts,scanf,sprintf,sscanf,strcat,strcpy)
-esym(534,strncat,strncpy,unlink,write)


// The following options are required by most compilers to
// noiselessly process iostream.h

//-elib(1717) //empty prototypes
-elib(522) //function return value ignored
//-elib(1053) //prototypes cannot be distinguished
//-elib(1721) //unusual operator =() declaration
//-elib(1720) //assignment op has non-const parameter
-elib(655)  // bitwise operator combining compatible enum's
-elib(641)  // converting enum's to int
-elib(537)  // repeated include file (ios.h)
//-elib(1511) // member (rdbuf) hides nonvirtual member
//-elib(1712) // default constructor not defined for class
//-esym(1702,operator<<,operator>>)

// The following additional options seem to be needed.

-d__cdecl=
-d__far=
-d__near=
-d__huge=
-d__declspec()=
-elib(747) //significant prototype coercion
-elib(740) //unusual pointer casts
//-elib(1029) //default argument repeated -- can't dist. char, signed char
//-elib(1055) //call to rdbuf() questioned?
//-elib(1708) //virtual inherited from base class
//-elib(1707) // operator new declared w/o 'static'
//-elib(1722) // assignment op does not return reference
-elib(149)  // default argument found in C code.
-elib(578)  // declaration of time hides delaration of global time().
-elib(761)  // two equivalent typedef declarations
//-elib(1065)  // same name declared as "C" and not "C"
//-elib(1066)  // same name declared as "C" and not "C"
-elib(726)
// Using Microsoft Foundation classes?  Then Uncomment the following:
//      lib-mfc.lnt


// Special Notice:  You may be receiving mysterious 1058 errors
//   when you use "iomanipulator"s.  For example:
//   cout << setw(4) << 4;
//   results in Error 1058 (assigning a const to a ref) because the
//   manipulator setw returns a non-lvalue which is assigned to a reference.
//   This reflects an oversight in the Microsoft header file: iomanip.h
//   Therein you may change the declaration:
//     friend ostream& operator<<(iostream& s, IOMANIP(T) & sm) { ...
//   to:
//     friend ostream& operator<<(iostream& s, const IOMANIP(T) & sm) { ...
//   to reflect the fact that sm is not modified by this function.

-e322

-d_WIN32

-e715

-esym(773,L_tmpnam)
-e506
// -e613
-d_M_IX86

-elib(7??)
-elib(6??)
-elib(8??)
-esym(534,vsprintf,vprintf,time,strftime,WSACleanup,_beginthread)
-elib(43)
-elib(123)
-d_MT